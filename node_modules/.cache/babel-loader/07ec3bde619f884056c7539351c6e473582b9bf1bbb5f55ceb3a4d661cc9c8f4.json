{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Toggle = _resolveComponent(\"Toggle\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, _toDisplayString($props.mode), 1 /* TEXT */), _createVNode(_component_Toggle, {\n    mode: $props.mode,\n    onToggle: _cache[0] || (_cache[0] = $event => _ctx.$emit('toggle'))\n  }, null, 8 /* PROPS */, [\"mode\"])]);\n}","map":{"version":3,"mappings":";;;uBACOA,oBAGM,cAFHC,oBAAmB,6BAAZC,WAAI,kBACXC,aAAgDC;IAAvCC,IAAI,EAAEH,WAAI;IAAGI,QAAM,sCAAEC,UAAK","names":["_createElementBlock","_createElementVNode","$props","_createVNode","_component_Toggle","mode","onToggle","_ctx"],"sourceRoot":"","sources":["/Users/mac/Desktop/app-card/src/components/HeaderCom.vue"],"sourcesContent":["<template>\n       <div>\n          <h1>{{ mode }}</h1>\n          <Toggle :mode=\"mode\" @toggle=\"$emit('toggle')\"/> \n       </div>\n</template>\n\n<script>\nimport  Toggle from \"./toggleWrapper.vue\"\n       export default {\n           props:['mode'],\n           components:{\n              Toggle\n           }   \n       }\n</script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}